// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Modèle Utilisateur avec authentification
model User {
  id            String   @id @default(cuid())
  nom           String
  prenom        String
  email         String   @unique
  password      String
  telephone     String
  poste         String
  departement   String
  role          String   @default("UTILISATEUR")
  statut        String   @default("ACTIF")
  dateEmbauche  DateTime
  permis        String
  adresse       String
  dateNaissance DateTime
  numeroEmploye String   @unique
  salaire       Float?
  photo         String?
  
  // Relations
  violations     Violation[]
  gpsRecords     GPSRecord[]
  documents      Document[]
  responsableVehicules Vehicle[] @relation("VehicleResponsable")
  
  // Audit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// Modèle Véhicule
model Vehicle {
  id              String        @id @default(cuid())
  marque          String
  modele          String
  immatriculation String        @unique
  annee           Int
  type            String
  statut          String        @default("ACTIF")
  kilometrage     Int
  dateAchat       DateTime
  prixAchat       Float
  couleur         String
  carburant       String
  numeroSerie     String        @unique
  dateAssurance   DateTime
  dateVisite      DateTime
  responsableId   String?
  notes           String?
  
  // Relations
  responsable      User?              @relation("VehicleResponsable", fields: [responsableId], references: [id])
  fuelRecords      FuelRecord[]
  maintenanceRecords MaintenanceRecord[]
  violations       Violation[]
  gpsRecords       GPSRecord[]
  documents        Document[]
  
  // Audit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("vehicles")
}

// Modèle Enregistrement Carburant
model FuelRecord {
  id           String    @id @default(cuid())
  vehiculeId   String
  vehiclePlate String
  vehicleBrand String
  date         DateTime
  fuelType     String
  quantity     Float
  unitPrice    Float
  totalCost    Float
  station      String
  mileage      Int
  conducteur   String?
  facture      String?
  notes        String?
  
  // Relations
  vehicle Vehicle @relation(fields: [vehiculeId], references: [id], onDelete: Cascade)
  
  // Audit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("fuel_records")
}

// Modèle Maintenance
model MaintenanceRecord {
  id            String            @id @default(cuid())
  vehiculeId    String
  vehiclePlate  String
  vehicleBrand  String
  type          String
  description   String
  date          DateTime
  datePrevu     DateTime?
  statut        String            @default("PROGRAMME")
  cout          Float
  garage        String
  pieces        String
  kilometrage   Int
  technicien    String?
  duree         String?
  garantie      String?
  facture       String?
  notes         String?
  
  // Relations
  vehicle Vehicle @relation(fields: [vehiculeId], references: [id], onDelete: Cascade)
  
  // Audit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("maintenance_records")
}

// Modèle Violations
model Violation {
  id                   String         @id @default(cuid())
  vehiculeId           String
  vehiclePlate         String
  conducteurId         String
  conducteurNom        String
  type                 String
  description          String
  date                 DateTime
  lieu                 String
  montant              Float
  statut               String         @default("EN_ATTENTE")
  numeroContravention  String         @unique
  numeroReference      String?
  dateEcheance         DateTime?
  datePaiement         DateTime?
  points               Int?
  tribunalCompetent    String?
  notes                String?
  
  // Relations
  vehicle    Vehicle @relation(fields: [vehiculeId], references: [id], onDelete: Cascade)
  conducteur User    @relation(fields: [conducteurId], references: [id])
  
  // Audit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("violations")
}

// Modèle GPS
model GPSRecord {
  id           String    @id @default(cuid())
  vehiculeId   String
  vehiclePlate String
  latitude     Float
  longitude    Float
  vitesse      Float
  direction    Float
  timestamp    DateTime
  adresse      String?
  conducteurId String?
  statut       String    @default("EN_MOUVEMENT")
  kilometrage  Int?
  carburant    Float?
  temperature  Float?
  
  // Relations
  vehicle    Vehicle @relation(fields: [vehiculeId], references: [id], onDelete: Cascade)
  conducteur User?   @relation(fields: [conducteurId], references: [id])
  
  // Audit
  createdAt DateTime @default(now())

  @@map("gps_records")
}

// Modèle Documents
model Document {
  id              String         @id @default(cuid())
  nom             String
  type            String
  vehiculeId      String?
  utilisateurId   String?
  dateCreation    DateTime       @default(now())
  dateExpiration  DateTime?
  taille          Int
  format          String
  chemin          String
  statut          String         @default("VALIDE")
  description     String?
  tags            String
  version         Int            @default(1)
  
  // Relations
  vehicle     Vehicle? @relation(fields: [vehiculeId], references: [id], onDelete: Cascade)
  utilisateur User?    @relation(fields: [utilisateurId], references: [id])
  
  // Audit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("documents")
}

// Table pour les sessions/tokens (optionnel)
model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("refresh_tokens")
}